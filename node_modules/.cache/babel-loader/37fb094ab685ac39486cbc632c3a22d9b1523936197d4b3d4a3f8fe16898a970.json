{"ast":null,"code":"import { authHeader } from './auth-header';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll\n};\nfunction login(email, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  };\n  return fetch(`/users/authenticate`, requestOptions).then(handleResponse).then(user => {\n    // login successful if there's a jwt token in the response\n    if (user.token) {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    return user;\n  });\n}\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/register`, requestOptions).then(handleResponse);\n}\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`/users`, requestOptions).then(handleResponse);\n}\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        location.reload(true);\n      }\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n    return data;\n  });\n}","map":{"version":3,"names":["authHeader","userService","login","logout","register","getAll","email","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","token","localStorage","setItem","removeItem","response","text","data","parse","ok","status","location","reload","error","message","statusText","Promise","reject"],"sources":["C:/Users/Sekou A Sidibe/Documents/NTA TECH/projets/klispay_backoffice/v3/src/helpers/authservice/user.service.js"],"sourcesContent":["import { authHeader } from './auth-header';\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n};\r\n\r\nfunction login(email, password) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n    };\r\n\r\n    return fetch(`/users/authenticate`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            // login successful if there's a jwt token in the response\r\n            if (user.token) {\r\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            }\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n    return fetch(`/users/register`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n    return fetch(`/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                location.reload(true);\r\n            }\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,eAAe;AAE1C,OAAO,MAAMC,WAAW,GAAG;EACvBC,KAAK;EACLC,MAAM;EACNC,QAAQ;EACRC;AACJ,CAAC;AAED,SAASH,KAAKA,CAACI,KAAK,EAAEC,QAAQ,EAAE;EAC5B,MAAMC,cAAc,GAAG;IACnBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC5C,CAAC;EAED,OAAOO,KAAK,CAAE,qBAAoB,EAAEN,cAAc,CAAC,CAC9CO,IAAI,CAACC,cAAc,CAAC,CACpBD,IAAI,CAACE,IAAI,IAAI;IACV;IACA,IAAIA,IAAI,CAACC,KAAK,EAAE;MACZ;MACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAER,IAAI,CAACC,SAAS,CAACI,IAAI,CAAC,CAAC;IACtD;IACA,OAAOA,IAAI;EACf,CAAC,CAAC;AACV;AAEA,SAASd,MAAMA,CAAA,EAAG;EACd;EACAgB,YAAY,CAACE,UAAU,CAAC,MAAM,CAAC;AACnC;AAEA,SAASjB,QAAQA,CAACa,IAAI,EAAE;EACpB,MAAMT,cAAc,GAAG;IACnBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,IAAI;EAC7B,CAAC;EACD,OAAOH,KAAK,CAAE,iBAAgB,EAAEN,cAAc,CAAC,CAACO,IAAI,CAACC,cAAc,CAAC;AACxE;AAEA,SAASX,MAAMA,CAAA,EAAG;EACd,MAAMG,cAAc,GAAG;IACnBC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAEV,UAAU,CAAC;EACxB,CAAC;EACD,OAAOc,KAAK,CAAE,QAAO,EAAEN,cAAc,CAAC,CAACO,IAAI,CAACC,cAAc,CAAC;AAC/D;AAEA,SAASA,cAAcA,CAACM,QAAQ,EAAE;EAC9B,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAACR,IAAI,CAACQ,IAAI,IAAI;IAChC,MAAMC,IAAI,GAAGD,IAAI,IAAIX,IAAI,CAACa,KAAK,CAACF,IAAI,CAAC;IACrC,IAAI,CAACD,QAAQ,CAACI,EAAE,EAAE;MACd,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;QACzB;QACAxB,MAAM,CAAC,CAAC;QACRyB,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;MACzB;MACA,MAAMC,KAAK,GAAIN,IAAI,IAAIA,IAAI,CAACO,OAAO,IAAKT,QAAQ,CAACU,UAAU;MAC3D,OAAOC,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;IAChC;IACA,OAAON,IAAI;EACf,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}