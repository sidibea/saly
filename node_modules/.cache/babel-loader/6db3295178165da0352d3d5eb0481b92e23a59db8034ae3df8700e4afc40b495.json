{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  for: \"nom\",\n  class: \"form-label\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Select2 = _resolveComponent(\"Select2\");\n  const _component_b_col = _resolveComponent(\"b-col\");\n  const _component_b_row = _resolveComponent(\"b-row\");\n  return _openBlock(), _createBlock(_component_b_row, null, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.widTypeRamification, (type, index) => {\n      return _openBlock(), _createBlock(_component_b_col, {\n        md: \"6\",\n        xl: \"6\",\n        key: type\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"label\", _hoisted_1, _toDisplayString(type.type), 1 /* TEXT */), _createVNode(_component_Select2, {\n          modelValue: $data.widTypeRamification[index].value,\n          \"onUpdate:modelValue\": $event => $data.widTypeRamification[index].value = $event,\n          required: \"\",\n          options: $data.typeRamifications.map(item => ({\n            id: item.id,\n            text: item.nom\n          })),\n          style: {\n            \"padding\": \"10\"\n          }\n        }, null, 8 /* PROPS */, [\"modelValue\", \"onUpdate:modelValue\", \"options\"])]),\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */);\n    }), 128 /* KEYED_FRAGMENT */))]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["for","class","_createBlock","_component_b_row","_createElementBlock","_Fragment","_renderList","$data","widTypeRamification","type","index","_component_b_col","md","xl","key","_createElementVNode","_hoisted_1","_toDisplayString","_createVNode","_component_Select2","value","$event","required","options","typeRamifications","map","item","id","text","nom","style"],"sources":["C:\\Users\\Sekou A Sidibe\\Documents\\NTA TECH\\projets\\klispay_backoffice\\v3\\src\\components\\FiltreRamification.vue"],"sourcesContent":["<template>\r\n  <b-row>\r\n      <b-col v-for=\"(type, index) in widTypeRamification\" md=\"6\" xl=\"6\" :key=\"type\">\r\n          <label for=\"nom\" class=\"form-label\">{{type.type}}</label>\r\n          <Select2 v-model=\"widTypeRamification[index].value\" required :options=\"typeRamifications.map(item =>({id: item.id, text: item.nom}))\"     style=\"padding: 10\"/>\r\n\r\n\r\n      </b-col>\r\n  </b-row>\r\n\r\n</template>\r\n<script>\r\nimport Select2 from 'vue3-select2-component';\r\nimport Api from \"../helpers/api\";\r\n\r\nexport default {\r\n    components:{\r\n        Select2\r\n    },\r\n    data(){\r\n      return{\r\n          user: null,\r\n          api: new Api(),\r\n          fields: [],\r\n          typeRamifications: [],\r\n          widTypeRamification: [],\r\n          listRamifications: [],\r\n      }\r\n    },\r\n\r\n    created() {\r\n        this.user = this.$store.state.currentUser;\r\n        let userEntite = [];\r\n        let userRamification = [];\r\n        //userRamification = this.user.affectations.filter(item => item.ramification != null && item.enabled === true);\r\n\r\n        if (this.user.type.nom !== 'Super Admin'){\r\n           if (this.user.affectations.length > 0){\r\n              this.user.affectations.forEach(item => {\r\n                  if(item.enabled === true){\r\n                      if (item.entite !== null){\r\n                          userEntite = this.user.affectations.filter(item => item.entite != null && item.enabled === true);\r\n                          this.fields.push({colonne: 'ent.id', operator: 'in', value: userEntite.map(item=> item.id), connector: \"and\"})\r\n                      }\r\n                      if (item.ramification !== null){\r\n                          userRamification = this.user.affectations.filter(item => item.ramification != null && item.enabled === true);\r\n                          this.fields.push({colonne: 'ent.id', operator: 'in', value: userRamification.map(item=> item.entite.id), connector: \"and\"})\r\n\r\n                      }\r\n                  }\r\n              })\r\n           }\r\n        }\r\n\r\n        this.fields.push({colonne: 'tram.enabled', operator: 'eq', value: 1, connector: \"and\"})\r\n      //  this.fields.push({colonne: 'ram.id', operator: 'in', value: userRamification.map(item=> item.id), connector: \"and\"})\r\n\r\n        this.api.listing(\"/type_ramifications\", this.fields, \"tram.ordre\", \"asc\", 1000, 1 )\r\n            .then(response => {\r\n                this.typeRamifications = response.data;\r\n                this.typeRamifications.forEach(item => {\r\n                    this.widTypeRamification.push({type: item.nom, value: null })\r\n\r\n                })\r\n            })\r\n        this.api.listing(\"/ramifications\", this.fields, \"tram.ordre\", \"asc\", 1000, 1 )\r\n            .then(response => {\r\n                this.listRamifications = response.data;\r\n            })\r\n\r\n\r\n    }\r\n\r\n}\r\n</script>"],"mappings":";;EAGiBA,GAAG,EAAC,KAAK;EAACC,KAAK,EAAC;;;;;;uBAF/BC,YAAA,CAOQC,gBAAA;sBANG,MAA4C,E,kBAAnDC,mBAAA,CAKQC,SAAA,QAAAC,WAAA,CALuBC,KAAA,CAAAC,mBAAmB,GAAnCC,IAAI,EAAEC,KAAK;2BAA1BR,YAAA,CAKQS,gBAAA;QAL4CC,EAAE,EAAC,GAAG;QAACC,EAAE,EAAC,GAAG;QAAEC,GAAG,EAAEL;;0BACpE,MAAyD,CAAzDM,mBAAA,CAAyD,SAAzDC,UAAyD,EAAAC,gBAAA,CAAnBR,IAAI,CAACA,IAAI,kBAC/CS,YAAA,CAA+JC,kBAAA;sBAA7IZ,KAAA,CAAAC,mBAAmB,CAACE,KAAK,EAAEU,KAAK;2CAAhCb,KAAA,CAAAC,mBAAmB,CAACE,KAAK,EAAEU,KAAK,GAAAC,MAAA;UAAEC,QAAQ,EAAR,EAAQ;UAAEC,OAAO,EAAEhB,KAAA,CAAAiB,iBAAiB,CAACC,GAAG,CAACC,IAAI;YAAAC,EAAA,EAASD,IAAI,CAACC,EAAE;YAAAC,IAAA,EAAQF,IAAI,CAACG;UAAG;UAASC,KAAmB,EAAnB;YAAA;UAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}