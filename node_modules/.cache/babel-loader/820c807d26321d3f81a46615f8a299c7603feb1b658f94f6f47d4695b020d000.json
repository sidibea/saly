{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createWebHistory, createRouter } from \"vue-router\";\nimport axios from 'axios';\nimport routes from './routes';\nimport appConfig from \"../../app.config\";\nimport store from '@/state/store';\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n  // Use the HTML5 history API (i.e. normal-looking routes)\n  // instead of routes with hashes (e.g. example.com/#/about).\n  // This may require some server configuration in production:\n  // https://router.vuejs.org/en/essentials/history-mode.html#example-server-configurations\n  mode: 'history',\n  // Simulate native-like scroll behavior when navigating to a new\n  // route and using back/forward buttons.\n  scrollBehavior(to, from, savedPosition) {\n    if (savedPosition) {\n      return savedPosition;\n    } else {\n      return {\n        top: 0,\n        left: 0\n      };\n    }\n  }\n});\n\n// API based Authentication\n// Before each route evaluates...\nrouter.beforeEach(async (routeTo, routeFrom, next) => {\n  const authRequired = routeTo.matched.some(route => route.meta.authRequired);\n  if (!authRequired) return next();\n  axios.defaults.headers.common['authorization'] = 'Bearer ' + localStorage.getItem('jwt'); // for all requests\n  if (store.state.currentUser != null) {\n    this.api.get(\"/users/\" + store.state.currentUser.id, {\n      email: this.email,\n      password: this.password\n    }).then(response => {\n      if (response.message) {\n        this.authError = response.message;\n        this.isAuthError = true;\n        this.processing = false;\n      } else {\n        if (response.enabled === true) {\n          localStorage.setItem('currentUser', JSON.stringify(response));\n          this.$store.dispatch(\"logIn\", response);\n          this.$router.push({\n            name: 'default'\n          });\n        } else {\n          this.isAuthError = true;\n          this.authError = \"Compte inactif !\";\n          this.processing = false;\n        }\n      }\n    });\n  }\n  await axios.get('https://api-node.themesbrand.website/profile').then(data => {\n    localStorage.setItem('userdata', JSON.stringify(data.data.user));\n    localStorage.setItem('userid', data.data.user._id);\n    localStorage.setItem('user', JSON.stringify(data.data.user));\n    next();\n  }).catch(() => {\n    next({\n      name: 'login',\n      query: {\n        redirectFrom: routeTo.fullPath\n      }\n    });\n  });\n});\nrouter.beforeEach((routeTo, routeFrom, next) => {\n  if (process.env.VUE_APP_DEFAULT_AUTH === \"firebase\") {\n    // Check if auth is required on this route\n    // (including nested routes).\n    const authRequired = routeTo.matched.some(route => route.meta.authRequired);\n\n    // If auth isn't required for the route, just continue.\n    if (!authRequired) return next();\n\n    // If auth is required and the user is logged in...\n    if (store.getters['auth/loggedIn']) {\n      // Validate the local user token...\n      return store.dispatch('auth/validate').then(validUser => {\n        // Then continue if the token still represents a valid user,\n        // otherwise redirect to login.\n        validUser ? next() : redirectToLogin();\n      });\n    }\n\n    // If auth is required and the user is NOT currently logged in,\n    // redirect to login.\n    redirectToLogin();\n\n    // eslint-disable-next-line no-unused-vars\n    // eslint-disable-next-line no-inner-declarations\n    function redirectToLogin() {\n      // Pass the original route to the login component\n      next({\n        name: 'login',\n        query: {\n          redirectFrom: routeTo.fullPath\n        }\n      });\n    }\n  } else {\n    const publicPages = ['/login', '/register', '/forgot-password'];\n    const authpage = !publicPages.includes(routeTo.path);\n    const loggeduser = localStorage.getItem('user');\n    if (authpage && !loggeduser) {\n      return next('/login');\n    }\n    next();\n  }\n});\nrouter.beforeResolve(async (routeTo, routeFrom, next) => {\n  // Create a `beforeResolve` hook, which fires whenever\n  // `beforeRouteEnter` and `beforeRouteUpdate` would. This\n  // allows us to ensure data is fetched even when params change,\n  // but the resolved route does not. We put it in `meta` to\n  // indicate that it's a hook we created, rather than part of\n  // Vue Router (yet?).\n  try {\n    // For each matched route...\n    for (const route of routeTo.matched) {\n      await new Promise((resolve, reject) => {\n        // If a `beforeResolve` hook is defined, call it with\n        // the same arguments as the `beforeEnter` hook.\n        if (route.meta && route.meta.beforeResolve) {\n          route.meta.beforeResolve(routeTo, routeFrom, (...args) => {\n            // If the user chose to redirect...\n            if (args.length) {\n              // If redirecting to the same route we're coming from...\n              // Complete the redirect.\n              next(...args);\n              reject(new Error('Redirected'));\n            } else {\n              resolve();\n            }\n          });\n        } else {\n          // Otherwise, continue resolving the route.\n          resolve();\n        }\n      });\n    }\n    // If a `beforeResolve` hook chose to redirect, just return.\n  } catch (error) {\n    return;\n  }\n  document.title = routeTo.meta.title + ' | ' + appConfig.title;\n  // If we reach this point, continue resolving the route.\n  next();\n});\nexport default router;","map":{"version":3,"names":["createWebHistory","createRouter","axios","routes","appConfig","store","router","history","mode","scrollBehavior","to","from","savedPosition","top","left","beforeEach","routeTo","routeFrom","next","authRequired","matched","some","route","meta","defaults","headers","common","localStorage","getItem","state","currentUser","api","get","id","email","password","then","response","message","authError","isAuthError","processing","enabled","setItem","JSON","stringify","$store","dispatch","$router","push","name","data","user","_id","catch","query","redirectFrom","fullPath","process","env","VUE_APP_DEFAULT_AUTH","getters","validUser","redirectToLogin","publicPages","authpage","includes","path","loggeduser","beforeResolve","Promise","resolve","reject","args","length","Error","error","document","title"],"sources":["C:/Users/Sekou A Sidibe/Documents/NTA TECH/projets/klispay_backoffice/v3/src/router/index.js"],"sourcesContent":["import { createWebHistory, createRouter } from \"vue-router\";\nimport axios from 'axios';\nimport routes from './routes';\nimport appConfig from \"../../app.config\";\nimport store from '@/state/store';\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes,\n  // Use the HTML5 history API (i.e. normal-looking routes)\n  // instead of routes with hashes (e.g. example.com/#/about).\n  // This may require some server configuration in production:\n  // https://router.vuejs.org/en/essentials/history-mode.html#example-server-configurations\n  mode: 'history',\n  // Simulate native-like scroll behavior when navigating to a new\n  // route and using back/forward buttons.\n  scrollBehavior(to, from, savedPosition) {\n    if (savedPosition) {\n      return savedPosition;\n    } else {\n      return { top: 0, left: 0 };\n    }\n  },\n});\n\n// API based Authentication\n// Before each route evaluates...\nrouter.beforeEach(async (routeTo, routeFrom, next) => {\n\n  const authRequired = routeTo.matched.some((route) => route.meta.authRequired);\n  \n  if (!authRequired) return next();\n  \n  axios.defaults.headers.common['authorization'] = 'Bearer ' + localStorage.getItem('jwt'); // for all requests\n  if (store.state.currentUser != null){\n    this.api.get(\"/users/\"+store.state.currentUser.id, {email: this.email, password: this.password})\n        .then(response => {\n          if (response.message){\n            this.authError = response.message;\n            this.isAuthError = true\n            this.processing = false\n\n          }else{\n            if (response.enabled === true){\n\n              localStorage.setItem('currentUser', JSON.stringify(response));\n              this.$store.dispatch(\"logIn\", response);\n              this.$router.push({name: 'default'});\n            }else{\n              this.isAuthError = true;\n              this.authError = \"Compte inactif !\"\n              this.processing = false\n\n            }\n          }\n\n        })\n  }\n  await axios.get('https://api-node.themesbrand.website/profile').then((data) => {\n    localStorage.setItem('userdata', JSON.stringify(data.data.user));\n    localStorage.setItem('userid', data.data.user._id);\n    localStorage.setItem('user', JSON.stringify(data.data.user));\n    next();\n  }).catch(() => {\n    next({ name: 'login', query: { redirectFrom: routeTo.fullPath } });\n  });\n});\n\nrouter.beforeEach((routeTo, routeFrom, next) => {\n  if (process.env.VUE_APP_DEFAULT_AUTH === \"firebase\") {\n\n    // Check if auth is required on this route\n    // (including nested routes).\n    const authRequired = routeTo.matched.some((route) => route.meta.authRequired);\n\n    // If auth isn't required for the route, just continue.\n    if (!authRequired) return next();\n\n    // If auth is required and the user is logged in...\n    if (store.getters['auth/loggedIn']) {\n      // Validate the local user token...\n      return store.dispatch('auth/validate').then((validUser) => {\n        // Then continue if the token still represents a valid user,\n        // otherwise redirect to login.\n        validUser ? next() : redirectToLogin();\n      });\n    }\n\n    // If auth is required and the user is NOT currently logged in,\n    // redirect to login.\n    redirectToLogin();\n\n    // eslint-disable-next-line no-unused-vars\n    // eslint-disable-next-line no-inner-declarations\n    function redirectToLogin() {\n      // Pass the original route to the login component\n      next({ name: 'login', query: { redirectFrom: routeTo.fullPath } });\n    }\n  } else {\n    const publicPages = ['/login', '/register', '/forgot-password'];\n    const authpage = !publicPages.includes(routeTo.path);\n    const loggeduser = localStorage.getItem('user');\n\n    if (authpage && !loggeduser) {\n      return next('/login');\n    }\n\n    next();\n  }\n});\n\nrouter.beforeResolve(async (routeTo, routeFrom, next) => {\n  // Create a `beforeResolve` hook, which fires whenever\n  // `beforeRouteEnter` and `beforeRouteUpdate` would. This\n  // allows us to ensure data is fetched even when params change,\n  // but the resolved route does not. We put it in `meta` to\n  // indicate that it's a hook we created, rather than part of\n  // Vue Router (yet?).\n  try {\n    // For each matched route...\n    for (const route of routeTo.matched) {\n      await new Promise((resolve, reject) => {\n        // If a `beforeResolve` hook is defined, call it with\n        // the same arguments as the `beforeEnter` hook.\n        if (route.meta && route.meta.beforeResolve) {\n          route.meta.beforeResolve(routeTo, routeFrom, (...args) => {\n            // If the user chose to redirect...\n            if (args.length) {\n              // If redirecting to the same route we're coming from...\n              // Complete the redirect.\n              next(...args);\n              reject(new Error('Redirected'));\n            } else {\n              resolve();\n            }\n          });\n        } else {\n          // Otherwise, continue resolving the route.\n          resolve();\n        }\n      });\n    }\n    // If a `beforeResolve` hook chose to redirect, just return.\n  } catch (error) {\n    return;\n  }\n  document.title = routeTo.meta.title + ' | ' + appConfig.title;\n  // If we reach this point, continue resolving the route.\n  next();\n});\n\nexport default router;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}