/// <reference types="node" />
import { Alert } from 'bootstrap';
declare const _sfc_main: import("vue").DefineComponent<{
    dismissLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    dismissible: {
        type: null;
        required: false;
        default: boolean;
    };
    fade: {
        type: null;
        required: false;
        default: boolean;
    };
    modelValue: {
        type: (BooleanConstructor | NumberConstructor)[];
        required: false;
        default: boolean;
    };
    show: {
        type: null;
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
}, {
    props: any;
    dismissibleBoolean: Readonly<import("vue").Ref<boolean>>;
    fadeBoolean: Readonly<import("vue").Ref<boolean>>;
    showBoolean: Readonly<import("vue").Ref<boolean>>;
    emit: {
        (e: 'closed'): void;
        (e: 'close-count-down', value: number): void;
        (e: 'update:modelValue', value: boolean | number): void;
    };
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    _countDownTimeout: NodeJS.Timeout | undefined;
    element: import("vue").Ref<HTMLElement | null>;
    instance: import("vue").Ref<Alert | undefined>;
    hasCloseSlot: import("vue").ComputedRef<boolean>;
    isAlertVisible: import("vue").ComputedRef<boolean>;
    computedClasses: import("vue").ComputedRef<(string[] | {
        show: boolean;
        'alert-dismissible': boolean;
        fade: boolean;
    })[]>;
    parseCountDown: (value: boolean | number) => number;
    countDown: import("vue").Ref<number>;
    parsedModelValue: import("vue").ComputedRef<boolean>;
    clearCountDownInterval: () => void;
    handleShowAndModelChanged: () => void;
    closeClicked: () => void;
    BCloseButton: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        emit: (e: "click", value: MouseEvent) => void;
        disabledBoolean: Readonly<import("vue").Ref<boolean>>;
        whiteBoolean: Readonly<import("vue").Ref<boolean>>;
        computedClasses: import("vue").ComputedRef<{
            'btn-close-white': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        type: any;
        ariaLabel: string;
        disabled: any;
        white: any;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "closed" | "close-count-down")[], "update:modelValue" | "closed" | "close-count-down", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dismissLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    dismissible: {
        type: null;
        required: false;
        default: boolean;
    };
    fade: {
        type: null;
        required: false;
        default: boolean;
    };
    modelValue: {
        type: (BooleanConstructor | NumberConstructor)[];
        required: false;
        default: boolean;
    };
    show: {
        type: null;
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClosed?: ((...args: any[]) => any) | undefined;
    "onClose-count-down"?: ((...args: any[]) => any) | undefined;
}, {
    show: any;
    modelValue: number | boolean;
    dismissLabel: string;
    dismissible: any;
    fade: any;
    variant: any;
}>;
export default _sfc_main;
